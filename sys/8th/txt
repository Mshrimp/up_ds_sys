
消息队列：
	1 创建一个关键字
		key_t ftok()
	2 创建消息队列
		msgget()
	3 发送数据
		msgsnd()
	4 接受数据
		msgrcv()  类型判断
	5 销毁消息队列
		msgctl()

共享内存：
	1 获取关键字 ftok
	2 创建共享内存 shmget
	3 映射共享内存 shmat  => p
	4 传送数据 strcpy memcpy
	5 接受数据 printf strcpy memcpy memmove
	6 取消映射 shmdt
	7 销毁共享内存：shmctl()
信号量：
	信号量的本质是一种数据操作锁，本身不具备数据交换功能， 而是通过控制其他通讯资源(文件 外部设备)来实现进程之间通讯。
	1 获取关键字 ftok
	2 创建信号量
		semget() => sem
	3 初始化信号量
		semctl()
			命令：SETVAL
				正数：表示加锁
				负数：表示解锁
	4 实现解锁或者解锁
		semop
			lock(sem, num) : 加锁函数
				负数：表示加锁
			unlock() : 解锁函数
				正数：表示解锁

	5 销毁信号锁
		semctl()  cmd => IPC_RMID

===============================================
线程：
	进程独享内存空间，而线程是共享内存空间
	无论是进程还是线程都有自己的运行时段。

	一个程序中， 至少有一个进程， 一个进程至少有一个线程
	线程运行时段 fork()

	进程是系统资源管理的最小单位
	而线程是程序执行流的最小单位。

	就是一个进程切换到另一个进程，需要上下文切换时间开销
		包括保存老进程CPU状态，并加载新进程的保存状态，用新进程的内存映射替换老进程的内存映射。线程则不需要上下文之间的切换。

	编译线程需要连接库文件 -lpthread 表示连接库名
						   -L 表示连接库路径

	线程号：pthread_self()  => unsigned long
	创建线程：
		int pthread_create(pthread_t *restrict thread,
		              const pthread_attr_t *restrict attr,
					                void *(*start_routine)(void*), void *restrict arg);

	第一个参数：表示线程号
	第二个参数：表示线程属性
				一般给NULL 默认属性
	第三个参数：线程执行函数
				NULL
	第四个参数：表示给线程指向函数传递参数
				NULL
	
	线程退出函数：
		void pthread_exit(void *value_ptr);
		不可以返回局部变量地址
		返回 int范围
		－2147483648 ～ 2147483647
	线程等待函数：
		int pthread_join(pthread_t thread, void **value_ptr);
			第一个参数：表示线程号
			第二个参数：表示接受返回值

			如果地址空间不存在，则需要申请空间地址


	线程清理函数
		注册：
			void pthread_cleanup_push(void (*routine)(void*), void *arg);
		销毁：
			void pthread_cleanup_pop(int execute);

		注册函数和销毁函数必须匹配
		注册顺序和销毁顺序是相反的
		是否执行，看销毁函数如果是0，则表示不执行
			如果是非零，则表示执行。
		跟代码位置相关


	线程锁：
		动态锁：
			初始化锁
			int pthread_mutex_init(pthread_mutex_t *restrict mutex,
			              const pthread_mutexattr_t *restrict attr);
			第一个参数：定义锁变量
			第二个参数：锁属性 NULL 表示快速互斥锁
			销毁锁
			int pthread_mutex_destroy(pthread_mutex_t *mutex);

			实现加锁和解锁
				加锁：
				int pthread_mutex_lock(pthread_mutex_t *mutex);
				解锁：
				int pthread_mutex_unlock(pthread_mutex_t *mutex);
		静态锁：
			pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;




homewrok:
	3000 ～ 6000 进程 通过线程实现
	两个参数 min max
	线程：一个参数：void *data -> min  + 300
		struct op_t {
			int min;
			int max;
		}                       => struct op_t


	
======================
进程之间通讯：
	1 信号 ：kill -l 软中断机制
	2 管道 ：匿名管道(pipe) 有名管道(mkfifo)
	3 消息队列
	4 共享内存
	5 信号量 => 数据锁
	6 套接子 => net
net:
	网络编程：就是通过套接子进行进程之间通讯的一种编程。	

	网络模型：描述网络的结构原理和工作原理
	OSI ：开发系统互联参考模型
	由底到高：
		物理层：
		数据链路层：
		网络层：
		传输层：
		会话层：
		表示层：
		应用层：
		
		前三层为OSI参考模型的低三层，主要祝福网络通讯连接的链路
		后四层为OSI参考模型高四层， 主要负责端到端的数据通讯。

		1 物理层：检测物理电路，确保数据的发送。
		设备：集线器
				1 放大信号
				2 扩展物理接口。
		
		2 数据链路层：保证数据在物理线路上的可靠传输。
			该层作用包括物理编址、网络拓扑结构、错误校验、帧序列及流控。
			物理编址：定义设备早数据链路层的编址方式。
			网络拓扑结构：表示设备的物理连接方式，如总线拓扑结构或者环拓扑结构。
			错误校验：传输数据的时候发生错误向上层协议发送警告。
			数据帧序列：重新整理并传输序列。
			流控：可能延缓数据的传输，以使接受设备不会因为某一时刻的接受超过处理能力的信息而崩溃。
			设备：交换机
				通过对信息进行重新生成，并经过内部处理转发到指定端口，具备自动寻址和交换作用。

		3 网络层：
			将网络地址翻译成对应物理地址，也就是解析IP地址
			设备：路由器 网关
				具有地址翻译，协议转换和数据格式转换功能。
		4 传输层：
			实现不同用户之间的数据通讯 tcp udp
		5 会话层：保证数据链接
			会话层提供的服务可使应用建立和位置会话，并能使会话获得同步。
		6 表示层：
			数据的表现形式
			即提供格式化的表示和转换数据服务，数据压缩和解压缩，加密或者解密。

		7 应用层：
			数据用户接口，也就是应用层用户程序编辑接口。
			


















