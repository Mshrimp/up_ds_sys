链表：
	
	链表结点信息
	struct node_t{
		data;	数据域 保存用户输入数据
		next;   指针域 保存下一个节点地址
	};

	有头 无序 不循环 单向链表 **
	无头 无序 不循环 单向链表 *
	有头 有序 不循环 单向链表
	无头 有序 不循环 单向链表
	有头 无序 循环 单向链表 *
	无头 无序 循环 单向链表 *

	有头 有序 循环 单向链表
	无头 有序 循环 单向链表

	strcut node_t{
		int data;			数据域 保存用户输入数据
		struct node_t *next;指针域 保存下一个节点地址
		struct node+t *prev;指针域 保存上一个节点地址
	};
	有头 无序 循环 双向链表 ** 封装

	无头 无序 循环 双向链表 *
	有头 有序 循环 双向链表
	无头 有序 循环 双向链表
	有头 无序 不循环 双向链表
	无头 无序 不循环 双向链表
	有头 有序 不循环 双向链表
	无头 有序 不循环 双向链表


	homewrok:
		实现后面的7个小函数
		1 实现有头 无序 不循环 单向链表逆序
		2 实现约瑟夫环

