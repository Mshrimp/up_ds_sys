key -> find -> data
			-> -1 NULL   -> array (key => next => value)

data => 100000 => net int -> 4 => 100000 * 4 
快速查找　-> 数组实现　-> 空间上浪费　-> data % MAX(哈希算法)　-> 哈希冲突
 -> 创建哈希表　-> 为了查找
 


tree:
	根节点：就是没有父节点节点就是根节点。
	节点：圆圈表示
	节点之间关系：直线表示
	父节点：
	子节点：
	兄弟节点：
	堂兄节点
	祖先节点：
	子孙节点：
	叶子节点：
	空树：一个节点都没有数，就是空树
	森林：就是n个树构成就是森林。空森林
	树的深度：
		就是树的层次，从根开始
		只有一个节点的树，则深度为１
	节点度：
		从节点开始
	二叉树：就是最多只有两个节点的树
		满二叉树：
			条件，假若树的深度为h
				节点数：2**h - 1
		完全二叉树：
			树深度：h:
				h - 1 : 2 ** (h - 1) - 1
				h : 从右到左，则连续缺若干个节点树
		平衡二叉树：
			左子树和右子树的深度差值不能大于１
	
		左子树的数据比右子树的数据都要小

	前序遍历：中左右
	中序遍历：左中右
	后序遍历：左右中
	层次遍历：








